# -*- coding: utf-8 -*-
"""Diverse_Misinformation_Code_FINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s8wF3pgQOWy3MSUVtcoMsfxXVhttSJqt

Code related to the Diverse Misinformation Paper by Lovato et al. 2022

Title: Diverse Misinformation: impacts of human biases on detection of deepfakes on online social networks
Cite as: Lovato et al. Diverse Misinformation: impacts of human biases on detection of deepfakes on online social networks (2022).
link to ArXiv pre-print [coming soon]
Contact: Juniper Lovato, University of Vermont, jlovato@uvm.edu
Authors and data collectors: Juniper Lovato1, Laurent H ÃÅebert-Dufresne1,2, Jonathan St-Onge1, Randall Harp1,3, , Gabriela Salazar Lopez1, Ijaz Ul Haq1, Sean Rogers1, AnneMarie Stupinski1, and Jeremiah Onaolapo. 1Vermont Complex Systems Center, University of Vermont, Burlington, 05405, USA2Department of Computer Science, University of Vermont, Burlington, 05405, USA3Department of Philosophy, University of Vermont, Burlington, 05405, USA
Data is a survey panel of US social media users, survey is conducted in English.
Keywords: Diversity, Privacy, Security, Social Media Behavior
2022 at the University of Vermont
IRB CHRBSS (Behavioral) STUDY00001786 Approved 12/6/2022

#imports
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import os
from utils import *

#Sklearn 
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.decomposition import PCA
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import matthews_corrcoef

#Stats imports
import statsmodels.api as sm
import researchpy as rp
import scipy.stats as stats
from scipy.stats import mannwhitneyu, normaltest
from scipy.stats import spearmanr
from statsmodels.stats.multitest import multipletests


# Plot settings
import plotly.express as px
import seaborn as sns 
import matplotlib.pyplot as plt
# %matplotlib inline
plt.rcParams['figure.figsize'] = (12, 9)
plt.rcParams['font.size'] = 12
from string import ascii_letters

encodeddata = pd.read_csv('filename.csv')

encoddeddatav1 = encodeddata[['v1_agree_being_said_to_nom',
                              'v1_recognize_to_nom',
                              'v1_credible_to_nom',
                              'v1_authentic_to_nom',
                              'Vid1_is_fake',
                              'Vid1_is_not_fake',
                              'Region',
                              'v1_Gaze_to_ord_scale',
                              'v1_Facial_expression_to_ord_scale',
                              'v1_Pose_to_ord_scale',
                              'v1_Personality_to_ord_scale',
                              'v1_Hair_to_ord_scale',
                              'v1_Style_to_ord_scale',
                              'v1_Age_to_ord_scale',
                              'v1_Background_environment_to_ord_scale',
                              'v1_Behavior_to_ord_scale',
                              'v1_Movement_to_ord_scale',
                              'v1_voice_to_ord_scale',
                              'v1_tone_to_ord_scale',
                              'Part_education_level_to_ord_scale',
                              'income_to_ord_scale',
                              'part_social_media_use_to_ord_scale',
                              'part_knowledge_deepfake_to_ord_scale',
                              'Part_Primed_to_nom',
                              'v1_Part_Guessed_Vid_Real_to_nom',
                              'Part_NOT_Primed_to_nom',
                              'v1_Part_Guessed_Vid_Fake_to_nom',
                              'Part_Gender_Men',
                              'Part_Gender_Woman',
                              'Part_Age_18_29',
                              'Part_Age_30_49',
                              'Part_Age_50_64',
                              'Part_Age_65plus',
                              'part_region_Middle_Atlantic',
                              'part_region_Midwest',
                              'part_region_South',
                              'part_region_Southwest',
                              'part_region_newengland',
                              'part_region_west',
                              'v1_Gender_Guess_Men',
                              'v1_Gender_Guess_Women',
                              'v1_age_guess_18_29',
                              'v1_age_guess_30_49',
                              'v1_age_guess_50_64',
                              'v1_age_guess_65plus',
                              'part_race_POC',
                              'part_race_White',
                              'v1_POC_Guess_No',
                              'v1_POC_Guess_yes',
                              'Vid1_Real_Guess_Real',
                              'Vid1_Fake_Guess_Real',
                              'Vid1_Real_Guess_Fake',
                              'Vid1_Fake_Guess_Fake',
                              'Part_Woman_POC',
                              'Part_Male_POC',
                              'Part_Woman_White',
                              'Part_Male_White',
                              'Video1_Woman_POC',
                              'Video1_Woman_White',
                              'Video1_Men_POC',
                              'Video1_Men_White',
                              'Vid1_Male_POC_Match',
                              'Vid1_Woman_POC_Match',
                              'Vid1_Woman_White_Match',
                              'Vid1_Male_White_Match',
                              'Vid1_age_1829_Match',
                              'Vid1_age_3049_Match',
                              'Vid1_age_5064_Match',
                              'Vid1_age_over65_Match',
                              'Vid1_Male_POC_MisMatch',
                              'Vid1_Woman_POC_MisMatch',
                              'Vid1_Woman_White_MisMatch',
                              'Vid1_Male_White_MisMatch',
                              'Vid1_age_1829_MisMatch',
                              'Vid1_age_3049_MisMatch',
                              'Vid1_age_5064_MisMatch',
                              'Vid1_age_over65_MisMatch']]

encoddeddatav1 = encoddeddatav1.rename(columns={'v1_agree_being_said_to_nom': 'agree_being_said_to_nom',
                              'v1_recognize_to_nom' : 'recognize_to_nom',
                              'v1_credible_to_nom' : 'credible_to_nom',
                              'v1_authentic_to_nom' : 'authentic_to_nom',
                              'Vid1_is_fake' : 'is_fake',
                              'Vid1_is_not_fake': 'is_not_fake',
                              'v1_Gaze_to_ord_scale' : 'Gaze_to_ord_scale',
                              'v1_Facial_expression_to_ord_scale' : 'Facial_expression_to_ord_scale',
                              'v1_Pose_to_ord_scale' : 'Pose_to_ord_scale',
                              'v1_Personality_to_ord_scale' : 'Personality_to_ord_scale',
                              'v1_Hair_to_ord_scale' : 'Hair_to_ord_scale',
                              'v1_Style_to_ord_scale': 'Style_to_ord_scale',
                              'v1_Age_to_ord_scale': 'Age_to_ord_scale',
                              'v1_Background_environment_to_ord_scale': 'Background_environment_to_ord_scale',
                              'v1_Behavior_to_ord_scale': 'Behavior_to_ord_scale',
                              'v1_Movement_to_ord_scale': 'Movement_to_ord_scale',
                              'v1_voice_to_ord_scale' : 'voice_to_ord_scale',
                              'v1_tone_to_ord_scale': 'tone_to_ord_scale',
                              'v1_Part_Guessed_Vid_Real_to_nom': 'Part_Guessed_Vid_Real_to_nom',
                              'v1_Part_Guessed_Vid_Fake_to_nom': 'Part_Guessed_Vid_Fake_to_nom',
                              'v1_Gender_Guess_Men': 'Gender_Guess_Men',
                              'v1_Gender_Guess_Women' : 'Gender_Guess_Women',
                              'v1_age_guess_18_29' : 'age_guess_18_29',
                              'v1_age_guess_30_49' : 'age_guess_30_49',
                              'v1_age_guess_50_64': 'age_guess_50_64',
                              'v1_age_guess_65plus' : 'age_guess_65plus',
                              'v1_POC_Guess_No' : 'POC_Guess_No',
                              'v1_POC_Guess_yes' : 'POC_Guess_yes',
                              'Vid1_Real_Guess_Real' : 'Real_Guess_Real',
                              'Vid1_Fake_Guess_Real' : 'Fake_Guess_Real',
                              'Vid1_Real_Guess_Fake' : 'Real_Guess_Fake',
                              'Vid1_Fake_Guess_Fake' : 'Fake_Guess_Fake',
                              'Video1_Woman_POC' : 'Woman_POC',
                              'Video1_Woman_White': 'Woman_White',
                              'Video1_Men_POC' : 'Men_POC',
                              'Video1_Men_White': 'Men_White',
                              'Vid1_Male_POC_Match' : 'Male_POC_Match',
                              'Vid1_Woman_POC_Match' : 'Woman_POC_Match',
                              'Vid1_Woman_White_Match':'Woman_White_Match',
                              'Vid1_Male_White_Match': 'Male_White_Match',
                              'Vid1_age_1829_Match': 'age_1829_Match',
                              'Vid1_age_3049_Match': 'age_3049_Match',
                              'Vid1_age_5064_Match': 'age_5064_Match',
                              'Vid1_age_over65_Match': 'age_over65_Match',
                              'Vid1_Male_POC_MisMatch': 'Male_POC_MisMatch',
                              'Vid1_Woman_POC_MisMatch': 'Woman_POC_MisMatch',
                              'Vid1_Woman_White_MisMatch': 'Woman_White_MisMatch',
                              'Vid1_Male_White_MisMatch': 'Male_White_MisMatch',
                              'Vid1_age_1829_MisMatch': 'age_1829_MisMatch',
                              'Vid1_age_3049_MisMatch': 'age_3049_MisMatch',
                              'Vid1_age_5064_MisMatch': 'age_5064_MisMatch',
                              'Vid1_age_over65_MisMatch': 'age_over65_MisMatch'})

encoddeddatav2 = encodeddata[['v2_agree_being_said_to_nom',
                             'v2_recognize_to_nom',
                             'v2_credible_to_nom',
                             'v2_authentic_to_nom',
                             'Vid2_is_fake',
                             'Vid2_is_not_fake',
                             'Region',
                             'v2_Gaze_to_ord_scale',
                             'v2_Facial_expression_to_ord_scale',
                             'v2_Pose_to_ord_scale',
                             'v2_Personality_to_ord_scale',
                             'v2_Hair_to_ord_scale',
                             'v2_Style_to_ord_scale',
                             'v2_Age_to_ord_scale',
                             'v2_Background_environment_to_ord_scale',
                             'v2_Behavior_to_ord_scale',
                             'v2_Movement_to_ord_scale',
                             'v2_voice_to_ord_scale',
                             'v2_tone_to_ord_scale',
                             'Part_education_level_to_ord_scale',
                             'income_to_ord_scale',
                             'part_social_media_use_to_ord_scale',
                             'part_knowledge_deepfake_to_ord_scale',
                             'Part_Primed_to_nom',
                             'v2_Part_Guessed_Vid_Real_to_nom',
                             'Part_NOT_Primed_to_nom',
                             'v2_Part_Guessed_Vid_Fake_to_nom',
                             'Part_Gender_Men',
                             'Part_Gender_Woman',
                             'Part_Age_18_29',
                             'Part_Age_30_49',
                             'Part_Age_50_64',
                             'Part_Age_65plus',
                             'part_region_Middle_Atlantic',
                             'part_region_Midwest',
                             'part_region_South',
                             'part_region_Southwest',
                             'part_region_newengland',
                             'part_region_west',
                             'v2_Gender_Guess_Men',
                             'v2_Gender_Guess_Women',
                             'v2_age_guess_18_29',
                             'v2_age_guess_30_49',
                             'v2_age_guess_50_64',
                             'v2_age_guess_65plus',
                             'part_race_POC',
                             'part_race_White',
                             'v2_POC_Guess_No',
                             'v2_POC_Guess_yes',
                             'Vid2_Real_Guess_Real',
                             'Vid2_Fake_Guess_Real',
                             'Vid2_Real_Guess_Fake',
                             'Vid2_Fake_Guess_Fake',
                             'Part_Woman_POC',
                             'Part_Male_POC',
                             'Part_Woman_White',
                             'Part_Male_White',
                             'Video2_Woman_POC',
                             'Video2_Woman_White',
                             'Video2_Men_POC',
                             'Video2_Men_White',
                             'Vid2_Male_POC_Match',
                             'Vid2_Woman_POC_Match',
                             'Vid2_Woman_White_Match',
                             'Vid2_Male_White_Match',
                             'Vid2_age_1829_Match',
                             'Vid2_age_3049_Match',
                             'Vid2_age_5064_Match',
                             'Vid2_age_over65_Match',
                             'Vid2_Male_POC_MisMatch',
                             'Vid2_Woman_POC_MisMatch',
                             'Vid2_Woman_White_MisMatch',
                             'Vid2_Male_White_MisMatch',
                             'Vid2_age_1829_MisMatch',
                             'Vid2_age_3049_MisMatch',
                             'Vid2_age_5064_MisMatch',
                             'Vid2_age_over65_MisMatch']]

encoddeddatav2 = encoddeddatav2.rename(columns={'v2_agree_being_said_to_nom': 'agree_being_said_to_nom',
                             'v2_recognize_to_nom' : 'recognize_to_nom',
                             'v2_credible_to_nom' : 'credible_to_nom',
                             'v2_authentic_to_nom' : 'authentic_to_nom',
                             'Vid2_is_fake' : 'is_fake',
                             'Vid2_is_not_fake': 'is_not_fake',
                             'v2_Gaze_to_ord_scale' : 'Gaze_to_ord_scale',
                             'v2_Facial_expression_to_ord_scale' : 'Facial_expression_to_ord_scale',
                             'v2_Pose_to_ord_scale' : 'Pose_to_ord_scale',
                             'v2_Personality_to_ord_scale' : 'Personality_to_ord_scale',
                             'v2_Hair_to_ord_scale' : 'Hair_to_ord_scale',
                             'v2_Style_to_ord_scale': 'Style_to_ord_scale',
                             'v2_Age_to_ord_scale': 'Age_to_ord_scale',
                             'v2_Background_environment_to_ord_scale': 'Background_environment_to_ord_scale',
                             'v2_Behavior_to_ord_scale': 'Behavior_to_ord_scale',
                             'v2_Movement_to_ord_scale': 'Movement_to_ord_scale',
                             'v2_voice_to_ord_scale' : 'voice_to_ord_scale',
                             'v2_tone_to_ord_scale': 'tone_to_ord_scale',
                             'v2_Part_Guessed_Vid_Real_to_nom': 'Part_Guessed_Vid_Real_to_nom',
                             'v2_Part_Guessed_Vid_Fake_to_nom': 'Part_Guessed_Vid_Fake_to_nom',
                             'v2_Gender_Guess_Men': 'Gender_Guess_Men',
                             'v2_Gender_Guess_Women' : 'Gender_Guess_Women',
                             'v2_age_guess_18_29' : 'age_guess_18_29',
                             'v2_age_guess_30_49' : 'age_guess_30_49',
                             'v2_age_guess_50_64': 'age_guess_50_64',
                             'v2_age_guess_65plus' : 'age_guess_65plus',
                             'v2_POC_Guess_No' : 'POC_Guess_No',
                             'v2_POC_Guess_yes' : 'POC_Guess_yes',
                             'Vid2_Real_Guess_Real' : 'Real_Guess_Real',
                             'Vid2_Fake_Guess_Real' : 'Fake_Guess_Real',
                             'Vid2_Real_Guess_Fake' : 'Real_Guess_Fake',
                             'Vid2_Fake_Guess_Fake' : 'Fake_Guess_Fake',
                             'Video2_Woman_POC' : 'Woman_POC',
                             'Video2_Woman_White': 'Woman_White',
                             'Video2_Men_POC' : 'Men_POC',
                             'Video2_Men_White': 'Men_White',
                             'Vid2_Male_POC_Match' : 'Male_POC_Match',
                             'Vid2_Woman_POC_Match' : 'Woman_POC_Match',
                             'Vid2_Woman_White_Match':'Woman_White_Match',
                             'Vid2_Male_White_Match': 'Male_White_Match',
                             'Vid2_age_1829_Match': 'age_1829_Match',
                             'Vid2_age_3049_Match': 'age_3049_Match',
                             'Vid2_age_5064_Match': 'age_5064_Match',
                             'Vid2_age_over65_Match': 'age_over65_Match',
                             'Vid2_Male_POC_MisMatch': 'Male_POC_MisMatch',
                             'Vid2_Woman_POC_MisMatch': 'Woman_POC_MisMatch',
                             'Vid2_Woman_White_MisMatch': 'Woman_White_MisMatch',
                             'Vid2_Male_White_MisMatch': 'Male_White_MisMatch',
                             'Vid2_age_1829_MisMatch': 'age_1829_MisMatch',
                             'Vid2_age_3049_MisMatch': 'age_3049_MisMatch',
                             'Vid2_age_5064_MisMatch': 'age_5064_MisMatch',
                             'Vid2_age_over65_MisMatch': 'age_over65_MisMatch'})

#append video one dataframe to video 2 data frame 
AllVids_encodeddata = encoddeddatav1.append(encoddeddatav2)

#making all maybe/uncertain variables numeric 
AllVids_encodeddata = AllVids_encodeddata.replace({'Maybe': 0})
AllVids_encodeddata = AllVids_encodeddata.replace({'Uncertain': 0})

#get dummy variables for regions 
AllVids_encodeddata = pd.get_dummies(AllVids_encodeddata, columns = ['Region'], drop_first = True)

#drop nans
AllVids_encodeddata = AllVids_encodeddata.dropna()

"""#Question 1: Priming effect: Are there categories of human beings better at correctly classifying a deepfake video if primed about deepfake content before being exposed?

##variable: knowledgable about deepfakes
"""

#the function returns knowledgable and not knowledgable participants guesses and the actual answers to the video being real or not 

def rho_knows_DF_guesses(x):
    if x['part_knowledge_deepfake_to_ord_scale'] >= 3:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan
AllVids_encodeddata['rho_knows_DF_guesses'] = AllVids_encodeddata.apply(rho_knows_DF_guesses, axis=1)


def rho_knows_DF_Answers(x):
    if x['part_knowledge_deepfake_to_ord_scale'] >= 3:
      return x['is_fake']
    else:
      return np.nan
AllVids_encodeddata['rho_knows_DF_Answers'] = AllVids_encodeddata.apply(rho_knows_DF_Answers, axis=1)

def rho_doesnt_know_DF_guesses(x):
    if x['part_knowledge_deepfake_to_ord_scale'] <= 2:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan
AllVids_encodeddata['rho_doesnt_know_DF_guesses'] = AllVids_encodeddata.apply(rho_doesnt_know_DF_guesses, axis=1)


def rho_doesnt_know_DF_Answers(x):
    if x['part_knowledge_deepfake_to_ord_scale'] <= 2:
      return x['is_fake']
    else:
      return np.nan
AllVids_encodeddata['rho_doesnt_know_DF_Answers'] = AllVids_encodeddata.apply(rho_doesnt_know_DF_Answers, axis=1)

#drop nans 
rho_doesnt_know_DF_Answers_toarray = np.array(AllVids_encodeddata['rho_doesnt_know_DF_Answers'].dropna())
rho_knows_DF_Answers_toarray = np.array(AllVids_encodeddata['rho_knows_DF_Answers'].dropna())
rho_knows_DF_guessesto_array = np.array(AllVids_encodeddata['rho_knows_DF_guesses'].dropna())
rho_doesnt_know_DF_guessesto_array = np.array(AllVids_encodeddata['rho_doesnt_know_DF_guesses'].dropna())

#getting the spearman correlation coefficient for knowledgable correct answers to participant guesses about the videos 
corr1spearman_know = scipy.stats.spearmanr(rho_knows_DF_Answers_toarray, rho_knows_DF_guessesto_array)
print(corr1spearman_know)

#getting the spearman correlation coefficient for not knowledable about deepfakes answer to participant guesses about the videos 
corr1spearman_notknow = scipy.stats.spearmanr(rho_doesnt_know_DF_Answers_toarray, rho_doesnt_know_DF_guessesto_array)
print(corr1spearman_notknow)

#Matthews Correlation Coefficient for knowledable about deepfakes answer to participant guesses about the videos 
y_true_know = rho_knows_DF_Answers_toarray
y_pred_know = rho_knows_DF_guessesto_array
print(matthews_corrcoef(y_true_know, y_pred_know))

#Confusion Matrix for knowledable about deepfakes answer to participant guesses about the videos 
cm75 = confusion_matrix(y_true_know, y_pred_know, normalize='all')
print(cm75)

ax= plt.subplot()
sns.heatmap(cm75, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: Participants with deepfake knowledge \n Guess vs. Actual', multialignment='center', fontsize=18); 
plt.tight_layout()

#Matthews Correlation Coefficient for not knowledable about deepfakes answer to participant guesses about the videos 
y_true_notknow = rho_doesnt_know_DF_Answers_toarray
y_pred_notknow = rho_doesnt_know_DF_guessesto_array

print(matthews_corrcoef(y_true_notknow, y_pred_notknow))

#Confusion Matrix for not knowledable about deepfakes answer to participant guesses about the videos 

cm74 = confusion_matrix(y_true_notknow, y_pred_notknow, normalize='all')

print(cm74)
ax= plt.subplot()
sns.heatmap(cm74, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: Participants with no deepfake knowledge \n Guess vs. Actual', multialignment='center', fontsize=18); 
plt.tight_layout()

"""##Variable: social media usage"""

#splitting social media usage into two types frequent or infrequent social media user 
def rho_part_not_socialmedia_savvy_guesses(x):
    if x['part_social_media_use_to_ord_scale'] <= 4:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan
AllVids_encodeddata['rho_part_not_socialmedia_savvy_guesses'] = AllVids_encodeddata.apply(rho_part_not_socialmedia_savvy_guesses, axis=1)


def rho_part_socialmedia_savvy_guesses(x):
    if x['part_social_media_use_to_ord_scale'] >= 5:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan
AllVids_encodeddata['rho_part_socialmedia_savvy_guesses'] = AllVids_encodeddata.apply(rho_part_socialmedia_savvy_guesses, axis=1)

#Answers 

def rho_part_not_socialmedia_savvy_Answers (x):
    if x['part_social_media_use_to_ord_scale'] <= 4:
      return x['is_fake']
    else:
      return np.nan
AllVids_encodeddata['rho_part_not_socialmedia_savvy_Answers'] = AllVids_encodeddata.apply(rho_part_not_socialmedia_savvy_Answers, axis=1)

def rho_part_socialmedia_savvy_Answers (x):
    if x['part_social_media_use_to_ord_scale'] >= 5:
      return x['is_fake']
    else:
      return np.nan
AllVids_encodeddata['rho_part_socialmedia_savvy_Answers'] = AllVids_encodeddata.apply(rho_part_socialmedia_savvy_Answers, axis=1)


AllVids_encodeddata['rho_part_socialmedia_savvy_Answers'].astype(float)
AllVids_encodeddata['rho_part_not_socialmedia_savvy_Answers'].astype(float)
AllVids_encodeddata['rho_part_socialmedia_savvy_guesses'].astype(float)
AllVids_encodeddata['rho_part_not_socialmedia_savvy_guesses'].astype(float)

#making arrays for all guesses and answers 
rho_sm_savvy_guesses_array = np.array(AllVids_encodeddata['rho_part_socialmedia_savvy_guesses'].dropna())
rho_not_sm_savvy_guesses_array = np.array(AllVids_encodeddata['rho_part_not_socialmedia_savvy_guesses'].dropna())
rho_sm_savvy_Answers_array = np.array(AllVids_encodeddata['rho_part_socialmedia_savvy_Answers'].dropna())
rho_not_sm_savvy_Answers_array = np.array(AllVids_encodeddata['rho_part_not_socialmedia_savvy_Answers'].dropna())

#spearman correlation coefficient for frequent social media user guesses and answers 
corr2spearman_sm_savvy = scipy.stats.spearmanr(rho_sm_savvy_guesses_array, rho_sm_savvy_Answers_array)
print(corr2spearman_sm_savvy)

#spearman correlation coefficient for infrequent social media user guesses and answers 
corr2spearman_not_sm_savvy = scipy.stats.spearmanr(rho_not_sm_savvy_guesses_array, rho_not_sm_savvy_Answers_array)
print(corr2spearman_not_sm_savvy)

#matthews correlation coefficient for frequent social media user guesses and answers 

y_true2_sm_savvy = rho_sm_savvy_guesses_array
y_pred2_sm_savvy = rho_sm_savvy_Answers_array

matthews_corrcoef(y_true2_sm_savvy, y_pred2_sm_savvy)

#Confusion matrix for frequent social media user guesses and answers 

cm73 = confusion_matrix(y_true2_sm_savvy, y_pred2_sm_savvy, normalize='all')
print(cm73)

ax= plt.subplot()
sns.heatmap(cm73, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: Participants social media savvy \n Guess vs. Actual', multialignment='center', fontsize=18);
plt.tight_layout()

#matthews correlation coefficient for infrequent social media user guesses and answers 
y_true2_not_sm_savvy = rho_not_sm_savvy_guesses_array
y_pred2_not_sm_savvy = rho_not_sm_savvy_Answers_array

matthews_corrcoef(y_true2_not_sm_savvy, y_pred2_not_sm_savvy)

#Confusion matrix for infrequent social media user guesses and answers 
cm72 = confusion_matrix(y_true2_not_sm_savvy, y_pred2_not_sm_savvy, normalize='all')
print(cm72)

ax= plt.subplot()
sns.heatmap(cm72, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: Participants not social media savvy \n Guess vs. Actual', multialignment='center', fontsize=18);  
plt.tight_layout()

"""#Question 2: Homophily bias: Are there categories of human beings better at detecting a deepfake video if the persona in the video matches their own identity?"""

#the function returns matched participants guesses and the actual answers to the video being real or not

##male POC 
def rho_Male_POC_Match_guesses(x):
  if x['Male_POC_Match'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_POC_Match_guesses'] = AllVids_encodeddata.apply(rho_Male_POC_Match_guesses, axis=1)

def rho_Male_POC_Match_answers(x):
  if x['Male_POC_Match'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_POC_Match_answers'] = AllVids_encodeddata.apply(rho_Male_POC_Match_answers, axis=1)

##Woman POC  
def rho_Woman_POC_Match_guesses(x):
  if x['Woman_POC_Match'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_POC_Match_guesses'] = AllVids_encodeddata.apply(rho_Woman_POC_Match_guesses, axis=1)

def rho_Woman_POC_Match_answers(x):
  if x['Woman_POC_Match'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_POC_Match_answers'] = AllVids_encodeddata.apply(rho_Woman_POC_Match_answers, axis=1)

##Woman white 

def rho_Woman_White_Match_guesses(x):
  if x['Woman_White_Match'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_White_Match_guesses'] = AllVids_encodeddata.apply(rho_Woman_White_Match_guesses, axis=1)

def rho_Woman_White_Match_answers(x):
  if x['Woman_White_Match'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_White_Match_answers'] = AllVids_encodeddata.apply(rho_Woman_White_Match_answers, axis=1)

##male white
def rho_Male_White_Match_guesses(x):
  if x['Male_White_Match'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_White_Match_guesses'] = AllVids_encodeddata.apply(rho_Male_White_Match_guesses, axis=1)

def rho_Male_White_Match_answers(x):
  if x['Male_White_Match'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_White_Match_answers'] = AllVids_encodeddata.apply(rho_Male_White_Match_answers, axis=1)

#making guesses and answers arrays 
#Male_POC_Match arrays
rho_Male_POC_Match_guesses_array = np.array(AllVids_encodeddata['rho_Male_POC_Match_guesses'].dropna())
rho_Male_POC_Match_answers_array = np.array(AllVids_encodeddata['rho_Male_POC_Match_answers'].dropna())
#rho_Woman_POC_Match
rho_Woman_POC_Match_guesses_array = np.array(AllVids_encodeddata['rho_Woman_POC_Match_guesses'].dropna())
rho_Woman_POC_Match_answers_array = np.array(AllVids_encodeddata['rho_Woman_POC_Match_answers'].dropna())
#rho_Woman_White_Match
rho_Woman_White_Match_guesses_array = np.array(AllVids_encodeddata['rho_Woman_White_Match_guesses'].dropna())
rho_Woman_White_Match_answers_array = np.array(AllVids_encodeddata['rho_Woman_White_Match_answers'].dropna())
#rho_Male_White_Match
rho_Male_White_Match_guesses_array = np.array(AllVids_encodeddata['rho_Male_White_Match_guesses'].dropna())
rho_Male_White_Match_answers_array = np.array(AllVids_encodeddata['rho_Male_White_Match_answers'].dropna())

#spearman correlation coefficient between male poc match guesses to answers
corr2spearman_Male_POC_Match = scipy.stats.spearmanr(rho_Male_POC_Match_guesses_array, rho_Male_POC_Match_answers_array)

print(corr2spearman_Male_POC_Match)

#matthews correlation coefficient between male poc match guesses to answers
y_true_Male_POC_Match= rho_Male_POC_Match_answers_array
y_pred_Male_POC_Match = rho_Male_POC_Match_guesses_array

print(matthews_corrcoef(y_true_Male_POC_Match, y_pred_Male_POC_Match))

#spearman correlation coefficient between female poc match guesses to answers

corr2spearman_Woman_POC_Match  = scipy.stats.spearmanr(rho_Woman_POC_Match_guesses_array, rho_Woman_POC_Match_answers_array)
print(corr2spearman_Woman_POC_Match)

#matthews correlation coefficient between female poc match guesses to answers
y_true_Woman_POC_Match = rho_Woman_POC_Match_answers_array
y_pred_Woman_POC_Match = rho_Woman_POC_Match_guesses_array

print(matthews_corrcoef(y_true_Woman_POC_Match, y_pred_Woman_POC_Match))

#spearman correlation coefficient between white female match guesses to answers
corr2spearman_Woman_White_Match  = scipy.stats.spearmanr(rho_Woman_White_Match_guesses_array, rho_Woman_White_Match_answers_array)
print(corr2spearman_Woman_White_Match)

#matthews correlation coefficient between white female match guesses to answers
y_true_Woman_White_Match = rho_Woman_White_Match_answers_array
y_pred_Woman_White_Match = rho_Woman_White_Match_guesses_array

print(matthews_corrcoef(y_true_Woman_White_Match, y_pred_Woman_White_Match))

#spearman correlation coefficient between white male match guesses to answers

corr2spearman_Male_White_Match  = scipy.stats.spearmanr(rho_Male_White_Match_guesses_array, rho_Male_White_Match_answers_array)
print(corr2spearman_Male_White_Match)

#matthews correlation coefficient between white male match guesses to answers

y_true_Male_White_Match = rho_Male_White_Match_answers_array
y_pred_Male_White_Match = rho_Male_White_Match_guesses_array

print(matthews_corrcoef(y_true_Male_White_Match, y_pred_Male_White_Match))

#confusion matrix between white woman match guesses to answers

cm5 = confusion_matrix(y_true_Woman_White_Match, y_pred_Woman_White_Match, normalize='all')
print(cm5)

ax= plt.subplot()
sns.heatmap(cm5, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: White women guesses on self similar video groups', multialignment='center', fontsize=18);

plt.tight_layout()

#confusion matrix between POC woman match guesses to answers

cm6 = confusion_matrix(y_true_Woman_POC_Match, y_pred_Woman_POC_Match, normalize='all')
print(cm6)

ax= plt.subplot()
sns.heatmap(cm6, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: Women POC guesses on self similar video groups', multialignment='center', fontsize=18);
plt.tight_layout()

#confusion matrix between white male match guesses to answers
cm7 = confusion_matrix(y_true_Male_White_Match, y_pred_Male_White_Match, normalize='all')
print(cm7)

ax= plt.subplot()
sns.heatmap(cm7, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: White male guesses on self similar video groups', multialignment='center', fontsize=18);
plt.tight_layout()

#confusion matrix between POC male match guesses to answers
cm8 = confusion_matrix(y_true_Male_POC_Match, y_pred_Male_POC_Match, normalize='all')
print(cm8)

ax= plt.subplot()
sns.heatmap(cm8, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: Male POC guesses on self similar video groups', multialignment='center', fontsize=18);
plt.tight_layout()

"""# Question 3: Heterophily bias: Are there categories of human beings better at detecting a deepfake video if the persona in the video is different from their own identity?"""

#the function returns matched participants guesses and the actual answers to the video being real or not

##male POC 
def rho_Male_POC_MisMatch_guesses(x):
  if x['Male_POC_MisMatch'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_POC_MisMatch_guesses'] = AllVids_encodeddata.apply(rho_Male_POC_MisMatch_guesses, axis=1)

def rho_Male_POC_MisMatch_answers(x):
  if x['Male_POC_MisMatch'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_POC_MisMatch_answers'] = AllVids_encodeddata.apply(rho_Male_POC_MisMatch_answers, axis=1)

##Woman POC  
def rho_Woman_POC_MisMatch_guesses(x):
  if x['Woman_POC_MisMatch'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_POC_MisMatch_guesses'] = AllVids_encodeddata.apply(rho_Woman_POC_MisMatch_guesses, axis=1)

def rho_Woman_POC_MisMatch_answers(x):
  if x['Woman_POC_MisMatch'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_POC_MisMatch_answers'] = AllVids_encodeddata.apply(rho_Woman_POC_MisMatch_answers, axis=1)

##Woman white 

def rho_Woman_White_MisMatch_guesses(x):
  if x['Woman_White_MisMatch'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_White_MisMatch_guesses'] = AllVids_encodeddata.apply(rho_Woman_White_MisMatch_guesses, axis=1)


def rho_Woman_White_MisMatch_answers(x):
  if x['Woman_White_MisMatch'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_White_MisMatch_answers'] = AllVids_encodeddata.apply(rho_Woman_White_MisMatch_answers, axis=1)

##male white
def rho_Male_White_MisMatch_guesses(x):
  if x['Male_White_MisMatch'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_White_MisMatch_guesses'] = AllVids_encodeddata.apply(rho_Male_White_MisMatch_guesses, axis=1)

def rho_Male_White_MisMatch_answers(x):
  if x['Male_White_MisMatch'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_White_MisMatch_answers'] = AllVids_encodeddata.apply(rho_Male_White_MisMatch_answers, axis=1)

#arrays for mismatches guesses and answers 
rho_Male_POC_MisMatch_guesses_array = np.array(AllVids_encodeddata['rho_Male_POC_MisMatch_guesses'].dropna())
rho_Male_POC_MisMatch_answers_array = np.array(AllVids_encodeddata['rho_Male_POC_MisMatch_answers'].dropna())

rho_Woman_POC_MisMatch_guesses_array = np.array(AllVids_encodeddata['rho_Woman_POC_MisMatch_guesses'].dropna())
rho_Woman_POC_MisMatch_answers_array = np.array(AllVids_encodeddata['rho_Woman_POC_MisMatch_answers'].dropna())

rho_Woman_White_MisMatch_guesses_array = np.array(AllVids_encodeddata['rho_Woman_White_MisMatch_guesses'].dropna())
rho_Woman_White_MisMatch_answers_array = np.array(AllVids_encodeddata['rho_Woman_White_MisMatch_answers'].dropna())

rho_Male_White_MisMatch_guesses_array = np.array(AllVids_encodeddata['rho_Male_White_MisMatch_guesses'].dropna())
rho_Male_White_MisMatch_answers_array = np.array(AllVids_encodeddata['rho_Male_White_MisMatch_answers'].dropna())

#spearman correlation coeffient for male poc mismatch guesses to answers 
corr3spearman_MalePOC_Mismatch = scipy.stats.spearmanr(rho_Male_POC_MisMatch_guesses_array, rho_Male_POC_MisMatch_answers_array)
print(corr3spearman_MalePOC_Mismatch)

#matthews correlation coeffient for male poc mismatch guesses to answers 
y_true_MalePOC_Mismatch = rho_Male_POC_MisMatch_answers_array
y_pred_MalePOC_Mismatch = rho_Male_POC_MisMatch_guesses_array

print(matthews_corrcoef(y_true_MalePOC_Mismatch, y_pred_MalePOC_Mismatch))

#spearman correlation coeffient for male white mismatch guesses to answers 
corr3spearman_MaleWhite_Mismatch = scipy.stats.spearmanr(rho_Male_White_MisMatch_guesses_array, rho_Male_White_MisMatch_answers_array)
print(corr3spearman_MaleWhite_Mismatch)

#matthews correlation coeffient for male white mismatch guesses to answers 
y_true_MaleWhite_Mismatch = rho_Male_White_MisMatch_answers_array
y_pred_MaleWhite_Mismatch = rho_Male_White_MisMatch_guesses_array
print(matthews_corrcoef(y_true_MaleWhite_Mismatch, y_pred_MaleWhite_Mismatch))

#spearman correlation coeffient for female POC mismatch guesses to answers 
corr3spearman_WomanPOC_Mismatch = scipy.stats.spearmanr(rho_Woman_POC_MisMatch_guesses_array, rho_Woman_POC_MisMatch_answers_array)
print(corr3spearman_WomanPOC_Mismatch)

#matthews correlation coeffient for female POC mismatch guesses to answers 
y_true_WomanPOC_Mismatch = rho_Woman_POC_MisMatch_answers_array
y_pred_WomanPOC_Mismatch = rho_Woman_POC_MisMatch_guesses_array
print(matthews_corrcoef(y_true_WomanPOC_Mismatch, y_pred_WomanPOC_Mismatch))

#spearman correlation coeffient for female white mismatch guesses to answers 
corr3spearman_WomanWhite_Mismatch = scipy.stats.spearmanr(rho_Woman_White_MisMatch_guesses_array, rho_Woman_White_MisMatch_answers_array)
print(corr3spearman_WomanWhite_Mismatch)

#matthews correlation coeffient for female white mismatch guesses to answers 
y_true_WomanWhite_Mismatch = rho_Woman_White_MisMatch_answers_array
y_pred_WomanWhite_Mismatch = rho_Woman_White_MisMatch_guesses_array
print(matthews_corrcoef(y_true_WomanWhite_Mismatch, y_pred_WomanWhite_Mismatch))

#confusion matrix for male white mismatch guesses to answers 

cm23 = confusion_matrix(y_true_MaleWhite_Mismatch, y_pred_MaleWhite_Mismatch, normalize='all')
print(cm23)

ax= plt.subplot()
sns.heatmap(cm23, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: White male guesses on dissimilar video groups', multialignment='center', fontsize=18);

#confusion matrix for male POC mismatch guesses to answers 
cm24 = confusion_matrix(y_true_MalePOC_Mismatch, y_pred_MalePOC_Mismatch, normalize='all')
print(cm24)

ax= plt.subplot()
sns.heatmap(cm24, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: Male POC guesses on dissimilar video groups', multialignment='center', fontsize=18);

#confusion matrix for female white mismatch guesses to answers 
cm25 = confusion_matrix(y_true_WomanWhite_Mismatch, y_pred_WomanWhite_Mismatch, normalize='all')
print(cm25)

ax= plt.subxplot()
sns.heatmap(cm25, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: White women guesses on dissimilar video groups', multialignment='center', fontsize=18);

#confusion matrix for female POC mismatch guesses to answers 
cm26 = confusion_matrix(y_true_WomanPOC_Mismatch, y_pred_WomanPOC_Mismatch, normalize='all')
print(cm26)

ax= plt.subplot()
sns.heatmap(cm26, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: Women POC guesses on dissimilar video groups', fontsize=18);

"""#Age """

#rho for age groups 
def rho_age_1829_guess(x):
    if x['Part_Age_18_29'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan

AllVids_encodeddata['rho_age_1829_guess'] = AllVids_encodeddata.apply(rho_age_1829_guess, axis=1)

def rho_age_1829_answers(x):
    if x['Part_Age_18_29'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_1829_answers'] = AllVids_encodeddata.apply(rho_age_1829_answers, axis=1)


def rho_age_30to49_guess(x):
    if x['Part_Age_30_49'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan

AllVids_encodeddata['rho_age_30to49_guess'] = AllVids_encodeddata.apply(rho_age_30to49_guess, axis=1)

def rho_age_30to49_answers(x):
    if x['Part_Age_30_49'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_30to49_answers'] = AllVids_encodeddata.apply(rho_age_30to49_answers, axis=1)

#

def rho_age_50to64_guess(x):
    if x['Part_Age_50_64'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan

AllVids_encodeddata['rho_age_50to64_guess'] = AllVids_encodeddata.apply(rho_age_50to64_guess, axis=1)

def rho_age_50to64_answers(x):
    if x['Part_Age_50_64'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_50to64_answers'] = AllVids_encodeddata.apply(rho_age_50to64_answers, axis=1)

#

def rho_age_over65_guess(x):
    if x['Part_Age_65plus'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan

AllVids_encodeddata['rho_age_over65_guess'] = AllVids_encodeddata.apply(rho_age_over65_guess, axis=1)

def rho_age_over65_answers(x):
    if x['Part_Age_65plus'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_over65_answers'] = AllVids_encodeddata.apply(rho_age_over65_answers, axis=1)

#arrays for age groups guesses and answers 
rho_age_over65_guess_array = np.array(AllVids_encodeddata['rho_age_over65_guess'].dropna())
rho_age_over65_answers_array = np.array(AllVids_encodeddata['rho_age_over65_answers'].dropna())

rho_age_50to64_guess_array = np.array(AllVids_encodeddata['rho_age_50to64_guess'].dropna())
rho_age_50to64_answers_array = np.array(AllVids_encodeddata['rho_age_50to64_answers'].dropna())

rho_age_30to49_guess_array = np.array(AllVids_encodeddata['rho_age_30to49_guess'].dropna())
rho_age_30to49_answers_array = np.array(AllVids_encodeddata['rho_age_30to49_answers'].dropna())

rho_age_1829_guess_array = np.array(AllVids_encodeddata['rho_age_1829_guess'].dropna())
rho_age_1829_answers_array = np.array(AllVids_encodeddata['rho_age_1829_answers'].dropna())

#spearman correlation coefficient answers to guesses ages 18-29
corr4spearman_1829= scipy.stats.spearmanr(rho_age_1829_answers_array, rho_age_1829_guess_array)
print(corr4spearman_1829)

#spearman correlation coefficient answers to guesses age 30-49
corr4spearman_30to49 = scipy.stats.spearmanr(rho_age_30to49_guess_array, rho_age_30to49_answers_array)
print(corr4spearman_30to49)

#spearman correlation coefficient answers to guesses age 50-64
corr4spearman_50to64 = scipy.stats.spearmanr(rho_age_50to64_answers_array, rho_age_50to64_guess_array)
print(corr4spearman_50to64)

#spearman correlation coefficient answers to guesses age over 65
corr4spearman_over65= scipy.stats.spearmanr(rho_age_over65_answers_array, rho_age_over65_guess_array)
print(corr4spearman_over65)

#matthews correlation coefficient answers to guesses age 18-29
y_true_1829 = rho_age_1829_answers_array
y_pred_1829 = rho_age_1829_guess_array
print(matthews_corrcoef(y_true_1829, y_pred_1829))

#confusion matrix answers to guesses age 18-29
cmAGE1829 = confusion_matrix(y_true_1829, y_pred_1829, normalize='all')

print(cmAGE1829)
ax= plt.subplot()
sns.heatmap(cmAGE1829, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 18-29 participants Guess vs. Actual', fontsize=18);

#matthews correlation coefficient answers to guesses age 30-49
y_true_30to49 = rho_age_30to49_answers_array
y_pred_30to49 = rho_age_30to49_guess_array

print(matthews_corrcoef(y_true_30to49, y_pred_30to49))

#confusion matrix answers to guesses age 30-49
cmAGE3049 = confusion_matrix(y_true_30to49, y_pred_30to49, normalize='all')

print(cmAGE3049)

ax= plt.subplot()
sns.heatmap(cmAGE3049, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 30-49 participants Guess vs. Actual', fontsize=18);

#matthews correlation coefficient answers to guesses age over 65
y_true_over65 = rho_age_over65_answers_array
y_pred_over65 = rho_age_over65_guess_array

print(matthews_corrcoef(y_true_over65, y_pred_over65))

#confusion matrix answers to guesses age over 65
cmAGEover65 = confusion_matrix(y_true_over65, y_pred_over65, normalize='all')
print(cmAGEover65)

ax= plt.subplot()
sns.heatmap(cmAGEover65, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: Over 65 participants Guess vs. Actual', fontsize=18);

#matthews correlation coefficient answers to guesses age  50-64
y_true_5064 = rho_age_50to64_answers_array
y_pred_5064 = rho_age_50to64_guess_array

print(matthews_corrcoef(y_true_5064, y_pred_5064))

#confusion matrix answers to guesses age 50-64 
cmAGE5064 = confusion_matrix(y_true_5064, y_pred_5064, normalize='all')
print(cmAGE5064)

ax= plt.subplot()
sns.heatmap(cmAGE5064, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 50-64 participants Guess vs. Actual', fontsize=18);

#rho for age matches 
def rho_age_1829_Match_guess(x):
    if x['age_1829_Match'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan

AllVids_encodeddata['rho_age_1829_Match_guess'] = AllVids_encodeddata.apply(rho_age_1829_Match_guess, axis=1)

def rho_age_3049_Match_guess(x):
    if x['age_3049_Match'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan

AllVids_encodeddata['rho_age_3049_Match_guess'] = AllVids_encodeddata.apply(rho_age_3049_Match_guess, axis=1)


def rho_age_1829_Match_answers(x):
    if x['age_1829_Match'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_1829_Match_answers'] = AllVids_encodeddata.apply(rho_age_1829_Match_answers, axis=1)

def rho_age_3049_Match_answers(x):
    if x['age_3049_Match'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_3049_Match_answers'] = AllVids_encodeddata.apply(rho_age_3049_Match_answers, axis=1)

def rho_age_over65_Match_guess(x):
    if x['age_over65_Match'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan 

AllVids_encodeddata['rho_age_over65_Match_guess'] = AllVids_encodeddata.apply(rho_age_over65_Match_guess, axis=1)


def rho_age_5064_Match_guess(x):
    if x['age_5064_Match'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan 

AllVids_encodeddata['rho_age_5064_Match_guess'] = AllVids_encodeddata.apply(rho_age_5064_Match_guess, axis=1)

def rho_age_over65_Match_answers(x):
    if x['age_over65_Match'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_over65_Match_answers'] = AllVids_encodeddata.apply(rho_age_over65_Match_answers, axis=1)

def rho_age_5064_Match_answers(x):
    if x['age_5064_Match'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_5064_Match_answers'] = AllVids_encodeddata.apply(rho_age_5064_Match_answers, axis=1)

#rho for age mismatches 
def rho_age_1829_MisMatch_guess(x):
    if x['age_1829_MisMatch'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan

AllVids_encodeddata['rho_age_1829_MisMatch_guess'] = AllVids_encodeddata.apply(rho_age_1829_MisMatch_guess, axis=1)

def rho_age_3049_MisMatch_guess(x):
    if x['age_3049_MisMatch'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan

AllVids_encodeddata['rho_age_3049_MisMatch_guess'] = AllVids_encodeddata.apply(rho_age_3049_MisMatch_guess, axis=1)


def rho_age_1829_MisMatch_answers(x):
    if x['age_1829_MisMatch'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_1829_MisMatch_answers'] = AllVids_encodeddata.apply(rho_age_1829_MisMatch_answers, axis=1)

def rho_age_3049_MisMatch_answers(x):
    if x['age_3049_MisMatch'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_3049_MisMatch_answers'] = AllVids_encodeddata.apply(rho_age_3049_MisMatch_answers, axis=1)

def rho_age_over65_MisMatch_guess(x):
    if x['age_over65_MisMatch'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan 

AllVids_encodeddata['rho_age_over65_MisMatch_guess'] = AllVids_encodeddata.apply(rho_age_over65_MisMatch_guess, axis=1)


def rho_age_5064_MisMatch_guess(x):
    if x['age_5064_MisMatch'] == 1:
      return x['Part_Guessed_Vid_Fake_to_nom']
    else:
      return np.nan 

AllVids_encodeddata['rho_age_5064_MisMatch_guess'] = AllVids_encodeddata.apply(rho_age_5064_MisMatch_guess, axis=1)

def rho_age_over65_MisMatch_answers(x):
    if x['age_over65_MisMatch'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_over65_MisMatch_answers'] = AllVids_encodeddata.apply(rho_age_over65_MisMatch_answers, axis=1)

def rho_age_5064_MisMatch_answers(x):
    if x['age_5064_MisMatch'] == 1:
      return x['is_fake']
    else:
      return np.nan

AllVids_encodeddata['rho_age_5064_MisMatch_answers'] = AllVids_encodeddata.apply(rho_age_5064_MisMatch_answers, axis=1)

#arrays for age group matches guesses to answers 

#match 
rho_age_5064_Match_answers_array = np.array(AllVids_encodeddata['rho_age_5064_Match_answers'].dropna())
rho_age_5064_Match_guess_array = np.array(AllVids_encodeddata['rho_age_5064_Match_guess'].dropna())

rho_age_over65_Match_answers_array = np.array(AllVids_encodeddata['rho_age_over65_Match_answers'].dropna())
rho_age_over65_Match_guess_array = np.array(AllVids_encodeddata['rho_age_over65_Match_guess'].dropna())

rho_age_3049_Match_answers_array = np.array(AllVids_encodeddata['rho_age_3049_Match_answers'].dropna())
rho_age_3049_Match_guess_array = np.array(AllVids_encodeddata['rho_age_3049_Match_guess'].dropna())

rho_age_1829_Match_answers_array = np.array(AllVids_encodeddata['rho_age_1829_Match_answers'].dropna())
rho_age_1829_Match_guess_array = np.array(AllVids_encodeddata['rho_age_1829_Match_guess'].dropna())

#arrays for age group mismatches guesses to answers 

#mismatch
rho_age_5064_MisMatch_answers_array = np.array(AllVids_encodeddata['rho_age_5064_MisMatch_answers'].dropna())
rho_age_5064_MisMatch_guess_array = np.array(AllVids_encodeddata['rho_age_5064_MisMatch_guess'].dropna())

rho_age_over65_MisMatch_answers_array = np.array(AllVids_encodeddata['rho_age_over65_MisMatch_answers'].dropna())
rho_age_over65_MisMatch_guess_array = np.array(AllVids_encodeddata['rho_age_over65_MisMatch_guess'].dropna())

rho_age_3049_MisMatch_answers_array = np.array(AllVids_encodeddata['rho_age_3049_MisMatch_answers'].dropna())
rho_age_3049_MisMatch_guess_array = np.array(AllVids_encodeddata['rho_age_3049_MisMatch_guess'].dropna())

rho_age_1829_MisMatch_answers_array = np.array(AllVids_encodeddata['rho_age_1829_MisMatch_answers'].dropna())
rho_age_1829_MisMatch_guess_array = np.array(AllVids_encodeddata['rho_age_1829_MisMatch_guess'].dropna())

#spearman correlation coefficient for age guesses to answers 18-29 match
corr4spearman_1829MATCH = scipy.stats.spearmanr(rho_age_1829_Match_guess_array, rho_age_1829_Match_answers_array)
print(corr4spearman_1829MATCH)

#spearman correlation coefficient for age guesses to answers  18-29 mistmatch 
corr4spearman_1829MISMATCH = scipy.stats.spearmanr(rho_age_1829_MisMatch_guess_array, rho_age_1829_MisMatch_answers_array)
print(corr4spearman_1829MISMATCH)

#spearman correlation coefficient for age guesses to answers 30-49 mismatch

corr4spearman_3049MISMATCH = scipy.stats.spearmanr(rho_age_3049_MisMatch_guess_array, rho_age_3049_MisMatch_answers_array)
print(corr4spearman_3049MISMATCH)

#spearman correlation coefficient for age guesses to answers 30-49 match

corr4spearman_3049MATCH = scipy.stats.spearmanr(rho_age_3049_Match_guess_array, rho_age_3049_Match_answers_array)
print(corr4spearman_3049MATCH)

#spearman correlation coefficient for age guesses to answers 50-64 mismatch

corr4spearman_5064MISMATCH = scipy.stats.spearmanr(rho_age_5064_MisMatch_guess_array, rho_age_5064_MisMatch_answers_array)
print(corr4spearman_5064MISMATCH)

#spearman correlation coefficient for age guesses to answers 50-64 mmatch

corr4spearman_5064MATCH = scipy.stats.spearmanr(rho_age_5064_Match_guess_array, rho_age_5064_Match_answers_array)
print(corr4spearman_5064MATCH)

#spearman correlation coefficient for age guesses to answers over 65 mismmatch

corr4spearman_over65MISMATCH = scipy.stats.spearmanr(rho_age_over65_MisMatch_guess_array, rho_age_over65_MisMatch_answers_array)
print(corr4spearman_over65MISMATCH)

#spearman correlation coefficient for age guesses to answers over 65 match

corr4spearman_over65MATCH = scipy.stats.spearmanr(rho_age_over65_Match_guess_array, rho_age_over65_Match_answers_array)
print(corr4spearman_over65MATCH)

#matthews correlation coefficient for age guesses to answers 18-29 match

y_true_1829_match = rho_age_1829_Match_answers_array
y_pred_1829_match = rho_age_1829_Match_guess_array

print(matthews_corrcoef(y_true_1829_match, y_pred_1829_match))

#matthews correlation coefficient for age guesses to answers 18-29 mismatch

y_true_1829_mismatch = rho_age_1829_MisMatch_answers_array
y_pred_1829_mismatch = rho_age_1829_MisMatch_guess_array

print(matthews_corrcoef(y_true_1829_mismatch, y_pred_1829_mismatch))

#confusion matrix for age guesses to answers 18-29 mismatch

cmAGE1829mismatch = confusion_matrix(y_true_1829_mismatch, y_pred_1829_mismatch, normalize='all')
print(cmAGE1829mismatch)


ax= plt.subplot()
sns.heatmap(cmAGE1829mismatch, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 18-29 Mismatch participants Guess vs. Actual', fontsize=18);

#confusion matrix for age guesses to answers 18-29 match

cmAGE1829match = confusion_matrix(y_true_1829_match, y_pred_1829_match, normalize='all')
print(cmAGE1829match)


ax= plt.subplot()
sns.heatmap(cmAGE1829match, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 18-29 Match participants Guess vs. Actual', fontsize=18);

#Matthews correlation coefficient for age guesses to answers 30-49 match

y_true_3049_match = rho_age_3049_Match_answers_array
y_pred_3049_match = rho_age_3049_Match_guess_array

print(matthews_corrcoef(y_true_3049_match, y_pred_3049_match))

#Matthews correlation coefficient for age guesses to answers 30-49 mismatch

y_true_3049_mismatch = rho_age_3049_MisMatch_answers_array
y_pred_3049_mismatch = rho_age_3049_MisMatch_guess_array

print(matthews_corrcoef(y_true_3049_mismatch, y_pred_3049_mismatch))

#confusion matrix for age guesses to answers 30-49 mismatch

cmAGE3049mismatch = confusion_matrix(y_true_3049_mismatch, y_pred_3049_mismatch, normalize='all')

print(cmAGE3049mismatch)

ax= plt.subplot()
sns.heatmap(cmAGE3049mismatch, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 30-49 Mismatch participants Guess vs. Actual', fontsize=18);

#confusion matrix for age guesses to answers 30-49 match

cmAGE3049match = confusion_matrix(y_true_3049_match, y_pred_3049_match, normalize='all')

print(cmAGE3049match)

ax= plt.subplot()
sns.heatmap(cmAGE3049match, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 30-49 Match participants Guess vs. Actual', fontsize=18);

#matthews correlation coefficient for age guesses to answers 50-64 match

y_true_5064_match = rho_age_5064_Match_answers_array
y_pred_5064_match = rho_age_5064_Match_guess_array

print(matthews_corrcoef(y_true_5064_match, y_pred_5064_match))

#matthews correlation coefficient for age guesses to answers 50-64 mismatch

y_true_5064_mismatch = rho_age_5064_MisMatch_answers_array
y_pred_5064_mismatch = rho_age_5064_MisMatch_guess_array

print(matthews_corrcoef(y_true_5064_mismatch, y_pred_5064_mismatch))

#confusion matrix for age guesses to answers 50-64 match

cmAGE5064match = confusion_matrix(y_true_5064_match, y_pred_5064_match, normalize='all')

print(cmAGE5064match)

ax= plt.subplot()
sns.heatmap(cmAGE5064match, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 50-64 Match participants Guess vs. Actual', fontsize=18);

#confusion matrix for age guesses to answers 50-64 mismatch

cmAGE5064mismatch = confusion_matrix(y_true_5064_mismatch, y_pred_5064_mismatch, normalize='all')
print(cmAGE5064mismatch)

ax= plt.subplot()
sns.heatmap(cmAGE5064mismatch, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 50-64 Mismatch participants Guess vs. Actual', fontsize=18);

#matthews correlation coefficient for age guesses to answers over 65 match
y_true_over65_match = rho_age_over65_Match_answers_array
y_pred_over65_match = rho_age_over65_Match_guess_array

print(matthews_corrcoef(y_true_over65_match, y_pred_over65_match))

#matthews correlation coefficient for age guesses to answers over 65 mismatch

y_true_over65_mismatch = rho_age_over65_MisMatch_answers_array
y_pred_over65_mismatch = rho_age_over65_MisMatch_guess_array

print(matthews_corrcoef(y_true_over65_mismatch, y_pred_over65_mismatch))

#confusion matrix for age guesses to answers over 65 match

cmAGEover65match = confusion_matrix(y_true_over65_match, y_pred_over65_match, normalize='all')

print(cmAGEover65match)

ax= plt.subplot()
sns.heatmap(cmAGEover65match, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: over65 Match participants Guess vs. Actual', fontsize=18);

#confusion matrix for age guesses to answers over 65 mismatch

cmAGEover65mismatch = confusion_matrix(y_true_over65_mismatch, y_pred_over65_mismatch, normalize='all')
print(cmAGEover65mismatch)


ax= plt.subplot()
sns.heatmap(cmAGEover65mismatch, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: over65 Mismatch participants Guess vs. Actual', fontsize=18);

#matthews correlation coefficient for age guesses to answers 50-64 match

y_true_5064_match = rho_age_5064_Match_answers_array
y_pred_5064_match = rho_age_5064_Match_guess_array

print(matthews_corrcoef(y_true_5064_match, y_pred_5064_match))

#matthews correlation coefficient for age guesses to answers 50-64 mismatch

y_true_5064_mismatch = rho_age_5064_MisMatch_answers_array
y_pred_5064_mismatch = rho_age_5064_MisMatch_guess_array

print(matthews_corrcoef(y_true_5064_mismatch, y_pred_5064_mismatch))

#confusion matrix for age guesses to answers 50-64 mismatch

cmAGE5064mismatch = confusion_matrix(y_true_5064_mismatch, y_pred_5064_mismatch, normalize='all')

print(cmAGE5064mismatch)

ax= plt.subplot()
sns.heatmap(cmAGE5064mismatch, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 50-64 Mismatch participants Guess vs. Actual', fontsize=18);

#confusion matrix for age guesses to answers 50-64 match

cmAGE5064match = confusion_matrix(y_true_5064_match, y_pred_5064_match, normalize='all')
print(cmAGE5064match)

ax= plt.subplot()
sns.heatmap(cmAGE5064match, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: 50-64 Match participants Guess vs. Actual', fontsize=18);

"""#Baselines """

#the function returns matched participants guesses and the actual answers to the video being real or not

##male POC 
def rho_Male_POC_guesses(x):
  if x['Part_Male_POC'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_POC_guesses'] = AllVids_encodeddata.apply(rho_Male_POC_guesses, axis=1)

def rho_Male_POC_answers(x):
  if x['Part_Male_POC'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_POC_answers'] = AllVids_encodeddata.apply(rho_Male_POC_answers, axis=1)

##Woman POC  
def rho_Woman_POC_guesses(x):
  if x['Part_Woman_POC'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_POC_guesses'] = AllVids_encodeddata.apply(rho_Woman_POC_guesses, axis=1)

def rho_Woman_POC_answers(x):
  if x['Part_Woman_POC'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_POC_answers'] = AllVids_encodeddata.apply(rho_Woman_POC_answers, axis=1)

##Woman white 

def rho_Woman_White_guesses(x):
  if x['Part_Woman_White'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_White_guesses'] = AllVids_encodeddata.apply(rho_Woman_White_guesses, axis=1)


def rho_Woman_White_answers(x):
  if x['Part_Woman_White'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Woman_White_answers'] = AllVids_encodeddata.apply(rho_Woman_White_answers, axis=1)

##male white
def rho_Male_White_guesses(x):
  if x['Part_Male_White'] == 1:
    return x['Part_Guessed_Vid_Fake_to_nom']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_White_guesses'] = AllVids_encodeddata.apply(rho_Male_White_guesses, axis=1)

def rho_Male_White_answers(x):
  if x['Part_Male_White'] == 1:
    return x['is_fake']
  else:
    return np.nan

AllVids_encodeddata['rho_Male_White_answers'] = AllVids_encodeddata.apply(rho_Male_White_answers, axis=1)

#array for baseline user groups
rho_Male_White_guesses_array = np.array(AllVids_encodeddata['rho_Male_White_guesses'].dropna())
rho_Male_White_answers_array = np.array(AllVids_encodeddata['rho_Male_White_answers'].dropna())


rho_Male_POC_guesses_array = np.array(AllVids_encodeddata['rho_Male_POC_guesses'].dropna())
rho_Male_POC_answers_array = np.array(AllVids_encodeddata['rho_Male_POC_answers'].dropna())


rho_Woman_White_guesses_array = np.array(AllVids_encodeddata['rho_Woman_White_guesses'].dropna())
rho_Woman_White_answers_array = np.array(AllVids_encodeddata['rho_Woman_White_answers'].dropna())

rho_Woman_POC_guesses_array = np.array(AllVids_encodeddata['rho_Woman_POC_guesses'].dropna())
rho_Woman_POC_answers_array = np.array(AllVids_encodeddata['rho_Woman_POC_answers'].dropna())

#spearman correlation coefficient for women poc guesses to answers 
corr4spearman_Woman_POC = scipy.stats.spearmanr(rho_Woman_POC_guesses_array, rho_Woman_POC_answers_array)
print(corr4spearman_Woman_POC)

#spearman correlation coefficient for women white guesses to answers 
corr4spearman_Woman_White = scipy.stats.spearmanr(rho_Woman_White_guesses_array, rho_Woman_White_answers_array)
print(corr4spearman_Woman_White)

#spearman correlation coefficient for male POC guesses to answers 
corr4spearman_Male_POC = scipy.stats.spearmanr(rho_Male_POC_guesses_array, rho_Male_POC_answers_array)
print(corr4spearman_Male_POC)

#spearman correlation coefficient for male white guesses to answers 
corr4spearman_Male_White = scipy.stats.spearmanr(rho_Male_White_guesses_array, rho_Male_White_answers_array)
print(corr4spearman_Male_White)

#matthews correlation coefficient for women poc answers to guesses 
y_true_WomanPOC = rho_Woman_POC_answers_array
y_pred_WomanPOC = rho_Woman_POC_guesses_array

print(matthews_corrcoef(y_true_WomanPOC, y_pred_WomanPOC))

#matthews correlation coefficient for women white answers to guesses 
y_true_WomanWhite = rho_Woman_White_answers_array
y_pred_WomanWhite = rho_Woman_White_guesses_array

print(matthews_corrcoef(y_true_WomanWhite, y_pred_WomanWhite))

#confusion matrix for women white answers to guesses 
cmwomanwhite = confusion_matrix(y_true_WomanWhite, y_pred_WomanWhite, normalize='all')
print(cmwomanwhite)

#confusion matrix for women POC answers to guesses 
cmwomanPOC = confusion_matrix(y_true_WomanPOC, y_pred_WomanPOC, normalize='all')
print(cmwomanPOC)

#matthews correlation coefficient for male POC answers to guesses 

y_true_MalePOC = rho_Male_POC_answers_array
y_pred_MalePOC = rho_Male_POC_guesses_array

print(matthews_corrcoef(y_true_MalePOC, y_pred_MalePOC))

#matthews correlation coefficient for male white answers to guesses 

y_true_MaleWhite = rho_Male_White_answers_array
y_pred_MaleWhite = rho_Male_White_guesses_array

print(matthews_corrcoef(y_true_MaleWhite, y_pred_MaleWhite))

#confusion matrix for male POC answers to guesses 

cmmalePOC = confusion_matrix(y_true_MalePOC, y_pred_MalePOC, normalize='all')
print(cmmalePOC)

#confusion matrix for male white answers to guesses 

cmmaleWhite = confusion_matrix(y_true_MaleWhite, y_pred_MaleWhite, normalize='all')
print(cmmaleWhite)

"""#Other variables of interest, accuracy"""

#array for accuracy variables 
rho_guesses_array = np.array(AllVids_encodeddata['Part_Guessed_Vid_Fake_to_nom'].dropna())
rho_answers_array = np.array(AllVids_encodeddata['is_fake'].dropna())

#spearman correlation coefficient for guesses to answers 

corr4spearman_guessacc = scipy.stats.spearmanr(rho_guesses_array, rho_answers_array)
print(corr4spearman_guessacc)

#matthews correlation coefficient for answers to guesses 

y_true_guessac = rho_answers_array
y_pred_guessacc = rho_guesses_array

print(matthews_corrcoef(y_true_guessac, y_pred_guessacc))

cmmaleguessacc = confusion_matrix(y_true_guessac, y_pred_guessacc, normalize='all')
print(cmmaleguessacc)

#confusion matrix for male white answers to guesses 

cmall = confusion_matrix(y_true_guessac, y_pred_guessacc, normalize='all')
print(cmall)

ax= plt.subplot()
sns.heatmap(cmall, annot=True, fmt='g', ax=ax, cmap="YlGnBu", vmin=0, vmax=1);  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Participant Guess');ax.set_ylabel('Video Actual State'); 
ax.set_title('Confusion Matrix: Participants Guesses vs. Actual State of Video', fontsize=18);

#Accuracy score for all guesses to answers 
#(TP+TN)/(TP+FP+FN+TN) 
##[[TP 0.37191854 FN 0.12379421]
# [FP 0.36280815 TN 0.1414791 ]]

Accuracy = (0.37191854 + 0.12379421)/(0.37191854 + 0.36280815 +  0.1414791 + 0.12379421)
print(Accuracy)

#guess types 
def guessaccuracy(x):
  if x['Real_Guess_Real'] == 1 :
    return 'Video Real/Guess Real'
  elif x['Real_Guess_Fake'] == 1:
    return 'Video Real/Guess_Fake'
  elif x['Fake_Guess_Real'] == 1:
    return 'Video Fake/Guess_Real'
  elif x['Fake_Guess_Fake'] == 1:
    return 'Video Fake/Guess_Fake'

AllVids_encodeddata['guessaccuracy'] = AllVids_encodeddata.apply(guessaccuracy, axis=1)
print(AllVids_encodeddata['guessaccuracy'].unique())

#plot number of guess types 
plt.figure(figsize=[7, 7])
col_map = plt.get_cmap('Paired')

data = AllVids_encodeddata['guessaccuracy'].value_counts() 

ax = data.sort_values().plot(kind = 'barh', color=col_map.colors)
ax.set_xlabel('Count');ax.set_ylabel('Guess Type'); 
ax.set_title('Survey Participant Guess By Type', multialignment='center', fontsize=18);  
plt.show()

"""#Comparison of bias type charts"""

#LOAD DATA
path = ''
Compdata = pd.read_csv (path, index_col=0)

#separating out heterophily bias scores into their own dataframe 
hetbias = Compdata[Compdata["Bias Type"] == "Heterophily Bias"]
hetbias = hetbias.reset_index(drop=False)

#separating out baseline bias scores into their own dataframe 
Baseline = Compdata[Compdata["Bias Type"] == "Baseline"]
Baseline = Baseline.reset_index(drop=False)

#separating out homophily bias scores into their own dataframe 
hombias = Compdata[Compdata["Bias Type"] == "Homophily Bias"]
hombias = hombias.reset_index(drop=False)

#separating out prior knowledge/priming bias scores into their own dataframe 
primbias = Compdata[Compdata["Bias Type"] == "Priming Bias"]
primbias = primbias.reset_index(drop=False)

#plotting MCC scores for heterophily bias 

sns.set_theme(style="whitegrid")
sns.set(font_scale=2)

# Initialize the matplotlib figure
f, ax = plt.subplots(figsize=(10, 10))

# Plot the total crashes
sns.color_palette("YlGnBu")
sns.barplot(x="both vids Matthews Correlation Coefficient ", y="Feature ", data=hetbias, color="b")

# Add a legend and informative axis label
ax.set(xlim=(-0.025, 0.18), ylabel="",
       xlabel="MCC Score for Heterophily Bias")
sns.despine(left=True, bottom=True)

#plotting MCC scores for prior knowledge/priming bias

sns.set_theme(style="whitegrid")
sns.set(font_scale=2)

# Initialize the matplotlib figure
f, ax = plt.subplots(figsize=(10, 10))

# Plot the total crashes
sns.color_palette("YlGnBu")
sns.barplot(x="both vids Matthews Correlation Coefficient ", y="Feature ", data=primbias,
            color="b")

# Add a legend and informative axis label
ax.set(xlim=(-0.025, 0.18), ylabel="",
       xlabel="MCC Score for Prior Knowledge Bias")
sns.despine(left=True, bottom=True)

#plotting MCC scores for homophily bias

sns.set_theme(style="whitegrid")
sns.set(font_scale=2)

# Initialize the matplotlib figure
f, ax = plt.subplots(figsize=(10, 10))

# Plot the total crashes
sns.color_palette("YlGnBu")
sns.barplot(x="both vids Matthews Correlation Coefficient ", y="Feature ", data=hombias,
            color="b")

# Add a legend and informative axis label
ax.set(xlim=(-0.025, 0.18), ylabel="",
       xlabel="MCC Score for Homophily Bias")
sns.despine(left=True, bottom=True)

#plotting MCC scores for baseling user groups

sns.set_theme(style="whitegrid")
sns.set(font_scale=2)

# Initialize the matplotlib figure
f, ax = plt.subplots(figsize=(10, 10))

# Plot the total crashes
sns.color_palette("YlGnBu")
sns.barplot(x="both vids Matthews Correlation Coefficient ", y="Feature ", data=Baseline,
            color="b")

# Add a legend and informative axis label
ax.set(xlim=(-0.025, 0.18), ylabel="",
       xlabel="MCC Score by User Group (Baseline)")
sns.despine(left=True, bottom=True)